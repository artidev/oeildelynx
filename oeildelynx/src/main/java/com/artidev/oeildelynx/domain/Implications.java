/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-backend-jpa:src/main/java/domain/Entity.e.vm.java
 */
package com.artidev.oeildelynx.domain;

import static javax.persistence.CascadeType.MERGE;
import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.MapsId;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlTransient;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.base.Objects;

@Entity
@Table(name = "implications", uniqueConstraints = { @UniqueConstraint(name = "impliquer_pk", columnNames = { "numero_pers", "code_unite", "numero_affaire" }),
        @UniqueConstraint(name = "pk_implications", columnNames = { "numero_pers", "code_unite", "numero_affaire" }) })
public class Implications implements Identifiable<ImplicationsPk>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = LoggerFactory.getLogger(Implications.class);

    // Composite primary key
    private ImplicationsPk id = new ImplicationsPk();

    // Raw attributes
    private String role;

    // Many to one
    private Personne numeroPers;
    private Affaire numeroAffaire;
    private Unite codeUnite;

    // -----------------------
    // Composite Primary Key
    // -----------------------

    /**
     * Returns the composite primary key.
     */
    @Override
    @EmbeddedId
    public ImplicationsPk getId() {
        return id;
    }

    /**
     * Set the composite primary key.
     * @param id the composite primary key.
     */
    @Override
    public void setId(ImplicationsPk id) {
        this.id = id;
    }

    public Implications id(ImplicationsPk id) {
        setId(id);
        return this;
    }

    /**
     * Tells whether or not this instance has a non empty composite primary key set.
     * @return true if a non empty primary key is set, false otherwise
     */
    @Override
    @Transient
    @XmlTransient
    public boolean isIdSet() {
        return getId() != null && getId().areFieldsSet();
    }

    // -- [role] ------------------------

    @Size(max = 30)
    @Column(name = "`role`", length = 30)
    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    public Implications role(String role) {
        setRole(role);
        return this;
    }

    // -----------------------------------------------------------------
    // Many to One support
    // -----------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: Implications.numeroPers ==> Personne.id
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @JoinColumn(name = "numero_pers", nullable = false)
    @ManyToOne(cascade = { PERSIST, MERGE }, fetch = LAZY)
    @MapsId(value = "numeroPers")
    public Personne getNumeroPers() {
        return numeroPers;
    }

    /**
     * Set the {@link #numeroPers} without adding this Implications instance on the passed {@link #numeroPers}
     */
    public void setNumeroPers(Personne numeroPers) {
        this.numeroPers = numeroPers;
    }

    public Implications numeroPers(Personne numeroPers) {
        setNumeroPers(numeroPers);
        return this;
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: Implications.numeroAffaire ==> Affaire.id
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @JoinColumn(name = "numero_affaire", nullable = false)
    @ManyToOne(cascade = { PERSIST, MERGE }, fetch = LAZY)
    @MapsId(value = "numeroAffaire")
    public Affaire getNumeroAffaire() {
        return numeroAffaire;
    }

    /**
     * Set the {@link #numeroAffaire} without adding this Implications instance on the passed {@link #numeroAffaire}
     */
    public void setNumeroAffaire(Affaire numeroAffaire) {
        this.numeroAffaire = numeroAffaire;
    }

    public Implications numeroAffaire(Affaire numeroAffaire) {
        setNumeroAffaire(numeroAffaire);
        return this;
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: Implications.codeUnite ==> Unite.id
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @JoinColumn(name = "code_unite", nullable = false)
    @ManyToOne(cascade = { PERSIST, MERGE }, fetch = LAZY)
    @MapsId(value = "codeUnite")
    public Unite getCodeUnite() {
        return codeUnite;
    }

    /**
     * Set the {@link #codeUnite} without adding this Implications instance on the passed {@link #codeUnite}
     */
    public void setCodeUnite(Unite codeUnite) {
        this.codeUnite = codeUnite;
    }

    public Implications codeUnite(Unite codeUnite) {
        setCodeUnite(codeUnite);
        return this;
    }

    /**
     * Apply the default values.
     */
    public Implications withDefaults() {
        return this;
    }

    /**
     * Equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof Implications && hashCode() == other.hashCode());
    }

    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();

    @Override
    public int hashCode() {
        return identifiableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this Implications instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this) //
                .add(Implications_.role.getName(), getRole()) //
                .toString();
    }
}
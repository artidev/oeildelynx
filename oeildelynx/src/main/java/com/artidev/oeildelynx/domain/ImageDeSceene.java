/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-backend-jpa:src/main/java/domain/Entity.e.vm.java
 */
package com.artidev.oeildelynx.domain;

import static javax.persistence.CascadeType.MERGE;
import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlTransient;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.base.Objects;

@Entity
@Table(name = "image_de_sceene")
public class ImageDeSceene implements Identifiable<Long>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = LoggerFactory.getLogger(ImageDeSceene.class);

    // Raw attributes
    private Long id;
    private String image;

    // Many to one
    private Affaire numeroAffaire;

    // -- [id] ------------------------

    @Override
    @Column(name = "numero_img", precision = 19)
    @GeneratedValue
    @Id
    public Long getId() {
        return id;
    }

    @Override
    public void setId(Long id) {
        this.id = id;
    }

    public ImageDeSceene id(Long id) {
        setId(id);
        return this;
    }

    @Override
    @Transient
    @XmlTransient
    public boolean isIdSet() {
        return id != null;
    }

    // -- [image] ------------------------

   // @FixedLength(length = 254)
    @Column(name = "image", length = 254)
    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public ImageDeSceene image(String image) {
        setImage(image);
        return this;
    }

    // -----------------------------------------------------------------
    // Many to One support
    // -----------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: ImageDeSceene.numeroAffaire ==> Affaire.id
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @NotNull
    @JoinColumn(name = "numero_affaire", nullable = false)
    @ManyToOne(cascade = { PERSIST, MERGE }, fetch = LAZY)
    public Affaire getNumeroAffaire() {
        return numeroAffaire;
    }

    /**
     * Set the {@link #numeroAffaire} without adding this ImageDeSceene instance on the passed {@link #numeroAffaire}
     */
    public void setNumeroAffaire(Affaire numeroAffaire) {
        this.numeroAffaire = numeroAffaire;
    }

    public ImageDeSceene numeroAffaire(Affaire numeroAffaire) {
        setNumeroAffaire(numeroAffaire);
        return this;
    }

    /**
     * Apply the default values.
     */
    public ImageDeSceene withDefaults() {
        return this;
    }

    /**
     * Equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof ImageDeSceene && hashCode() == other.hashCode());
    }

    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();

    @Override
    public int hashCode() {
        return identifiableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this ImageDeSceene instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this) //
                .add(ImageDeSceene_.id.getName(), getId()) //
                .add(ImageDeSceene_.image.getName(), getImage()) //
                .toString();
    }
}
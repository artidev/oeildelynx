/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-backend-jpa:src/main/java/domain/Entity.e.vm.java
 */
package com.artidev.oeildelynx.domain;

import static javax.persistence.CascadeType.MERGE;
import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlTransient;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.base.Objects;

@Entity
@Table(name = "affaire")
public class Affaire implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = LoggerFactory.getLogger(Affaire.class);

    // Raw attributes
    private Integer id;
    private String libelleAffaire;

    // Many to one
    private Localite codeLocalite;

    // Many to many
    private List<Biens> numeroBiens = new ArrayList<Biens>();
    private List<Infraction> codeInfactions = new ArrayList<Infraction>();

    // -- [id] ------------------------

    @Override
    @Column(name = "numero_affaire", precision = 10)
    @GeneratedValue
    @Id
    public Integer getId() {
        return id;
    }

    @Override
    public void setId(Integer id) {
        this.id = id;
    }

    public Affaire id(Integer id) {
        setId(id);
        return this;
    }

    @Override
    @Transient
    @XmlTransient
    public boolean isIdSet() {
        return id != null;
    }

    // -- [libelleAffaire] ------------------------

    @Size(max = 100)
    @Column(name = "libelle_affaire", length = 100)
    public String getLibelleAffaire() {
        return libelleAffaire;
    }

    public void setLibelleAffaire(String libelleAffaire) {
        this.libelleAffaire = libelleAffaire;
    }

    public Affaire libelleAffaire(String libelleAffaire) {
        setLibelleAffaire(libelleAffaire);
        return this;
    }

    // -----------------------------------------------------------------
    // Many to One support
    // -----------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: Affaire.codeLocalite ==> Localite.id
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @NotNull
    @JoinColumn(name = "code_localite", nullable = false)
    @ManyToOne(cascade = { PERSIST, MERGE }, fetch = LAZY)
    public Localite getCodeLocalite() {
        return codeLocalite;
    }

    /**
     * Set the {@link #codeLocalite} without adding this Affaire instance on the passed {@link #codeLocalite}
     */
    public void setCodeLocalite(Localite codeLocalite) {
        this.codeLocalite = codeLocalite;
    }

    public Affaire codeLocalite(Localite codeLocalite) {
        setCodeLocalite(codeLocalite);
        return this;
    }

    // -----------------------------------------------------------------
    // Many to Many
    // -----------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
    // many-to-many: affaire ==> numeroBiens
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

    /**
     * Returns the {@link #numeroBiens} list.
     */
    @JoinTable(name = "affaire_objet", joinColumns = @JoinColumn(name = "numero_affaire"), inverseJoinColumns = @JoinColumn(name = "numero_bien"))
    @ManyToMany(cascade = { PERSIST, MERGE })
    public List<Biens> getNumeroBiens() {
        return numeroBiens;
    }

    /**
     * Set the {@link #numeroBiens} list.
     *
     * @param numeroBiens the list of Biens
     */
    public void setNumeroBiens(List<Biens> numeroBiens) {
        this.numeroBiens = numeroBiens;
    }

    /**
     * Helper method to add the passed {@link Biens} to the {@link #numeroBiens} list.
     */
    public boolean addNumeroBien(Biens numeroBien) {
        return getNumeroBiens().add(numeroBien);
    }

    /**
     * Helper method to remove the passed {@link Biens} from the {@link #numeroBiens} list.
     */
    public boolean removeNumeroBien(Biens numeroBien) {
        return getNumeroBiens().remove(numeroBien);
    }

    /**
     * Helper method to determine if the passed {@link Biens} is present in the {@link #numeroBiens} list.
     */
    public boolean containsNumeroBien(Biens numeroBien) {
        return getNumeroBiens() != null && getNumeroBiens().contains(numeroBien);
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
    // many-to-many: affaire ==> codeInfactions
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

    /**
     * Returns the {@link #codeInfactions} list.
     */
    @JoinTable(name = "association_33", joinColumns = @JoinColumn(name = "numero_affaire"), inverseJoinColumns = @JoinColumn(name = "code_infaction"))
    @ManyToMany(cascade = { PERSIST, MERGE })
    public List<Infraction> getCodeInfactions() {
        return codeInfactions;
    }

    /**
     * Set the {@link #codeInfactions} list.
     *
     * @param codeInfactions the list of Infraction
     */
    public void setCodeInfactions(List<Infraction> codeInfactions) {
        this.codeInfactions = codeInfactions;
    }

    /**
     * Helper method to add the passed {@link Infraction} to the {@link #codeInfactions} list.
     */
    public boolean addCodeInfaction(Infraction codeInfaction) {
        return getCodeInfactions().add(codeInfaction);
    }

    /**
     * Helper method to remove the passed {@link Infraction} from the {@link #codeInfactions} list.
     */
    public boolean removeCodeInfaction(Infraction codeInfaction) {
        return getCodeInfactions().remove(codeInfaction);
    }

    /**
     * Helper method to determine if the passed {@link Infraction} is present in the {@link #codeInfactions} list.
     */
    public boolean containsCodeInfaction(Infraction codeInfaction) {
        return getCodeInfactions() != null && getCodeInfactions().contains(codeInfaction);
    }

    /**
     * Apply the default values.
     */
    public Affaire withDefaults() {
        return this;
    }

    /**
     * Equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof Affaire && hashCode() == other.hashCode());
    }

    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();

    @Override
    public int hashCode() {
        return identifiableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this Affaire instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this) //
                .add(Affaire_.id.getName(), getId()) //
                .add(Affaire_.libelleAffaire.getName(), getLibelleAffaire()) //
                .toString();
    }
}
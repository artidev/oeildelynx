/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-backend-jpa:src/main/java/domain/Entity.e.vm.java
 */
package com.artidev.oeildelynx.domain;

import static javax.persistence.CascadeType.MERGE;
import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.MapsId;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import javax.xml.bind.annotation.XmlTransient;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.base.Objects;

@Entity
@Table(name = "profil_biometrique", uniqueConstraints = { @UniqueConstraint(name = "pk_profil_biometrique", columnNames = { "code_marquage", "numero_pers" }),
        @UniqueConstraint(name = "dactylaire_biometrie_pk", columnNames = { "code_marquage", "numero_pers" }) })
public class ProfilBiometrique implements Identifiable<ProfilBiometriquePk>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = LoggerFactory.getLogger(ProfilBiometrique.class);

    // Composite primary key
    private ProfilBiometriquePk id = new ProfilBiometriquePk();

    // Raw attributes
    private Long valeur;
    private String imageProfile;

    // Many to one
    private Personne numeroPers;
    private Biometrie codeMarquage;

    // -----------------------
    // Composite Primary Key
    // -----------------------

    /**
     * Returns the composite primary key.
     */
    @Override
    @EmbeddedId
    public ProfilBiometriquePk getId() {
        return id;
    }

    /**
     * Set the composite primary key.
     * @param id the composite primary key.
     */
    @Override
    public void setId(ProfilBiometriquePk id) {
        this.id = id;
    }

    public ProfilBiometrique id(ProfilBiometriquePk id) {
        setId(id);
        return this;
    }

    /**
     * Tells whether or not this instance has a non empty composite primary key set.
     * @return true if a non empty primary key is set, false otherwise
     */
    @Override
    @Transient
    @XmlTransient
    public boolean isIdSet() {
        return getId() != null && getId().areFieldsSet();
    }

    // -- [valeur] ------------------------

    @Column(name = "valeur", precision = 19)
    public Long getValeur() {
        return valeur;
    }

    public void setValeur(Long valeur) {
        this.valeur = valeur;
    }

    public ProfilBiometrique valeur(Long valeur) {
        setValeur(valeur);
        return this;
    }

    // -- [imageProfile] ------------------------

    //@FixedLength(length = 254)
    @Column(name = "image_profile", length = 254)
    public String getImageProfile() {
        return imageProfile;
    }

    public void setImageProfile(String imageProfile) {
        this.imageProfile = imageProfile;
    }

    public ProfilBiometrique imageProfile(String imageProfile) {
        setImageProfile(imageProfile);
        return this;
    }

    // -----------------------------------------------------------------
    // Many to One support
    // -----------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: ProfilBiometrique.numeroPers ==> Personne.id
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @JoinColumn(name = "numero_pers", nullable = false)
    @ManyToOne(cascade = { PERSIST, MERGE }, fetch = LAZY)
    @MapsId(value = "numeroPers")
    public Personne getNumeroPers() {
        return numeroPers;
    }

    /**
     * Set the {@link #numeroPers} without adding this ProfilBiometrique instance on the passed {@link #numeroPers}
     */
    public void setNumeroPers(Personne numeroPers) {
        this.numeroPers = numeroPers;
    }

    public ProfilBiometrique numeroPers(Personne numeroPers) {
        setNumeroPers(numeroPers);
        return this;
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: ProfilBiometrique.codeMarquage ==> Biometrie.id
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @JoinColumn(name = "code_marquage", nullable = false)
    @ManyToOne(cascade = { PERSIST, MERGE }, fetch = LAZY)
    @MapsId(value = "codeMarquage")
    public Biometrie getCodeMarquage() {
        return codeMarquage;
    }

    /**
     * Set the {@link #codeMarquage} without adding this ProfilBiometrique instance on the passed {@link #codeMarquage}
     */
    public void setCodeMarquage(Biometrie codeMarquage) {
        this.codeMarquage = codeMarquage;
    }

    public ProfilBiometrique codeMarquage(Biometrie codeMarquage) {
        setCodeMarquage(codeMarquage);
        return this;
    }

    /**
     * Apply the default values.
     */
    public ProfilBiometrique withDefaults() {
        return this;
    }

    /**
     * Equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof ProfilBiometrique && hashCode() == other.hashCode());
    }

    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();

    @Override
    public int hashCode() {
        return identifiableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this ProfilBiometrique instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this) //
                .add(ProfilBiometrique_.valeur.getName(), getValeur()) //
                .add(ProfilBiometrique_.imageProfile.getName(), getImageProfile()) //
                .toString();
    }
}